Areas for Highest Impact Improvement

Refactor from Hardcoded Logic to a Data-Driven System (Highest Impact):

The Issue: The biggest weakness is that game logic and numbers are hardcoded directly into the functions. For example: if (attackerPlayer?.factionId === 'NEPHITES'), visionRadius = 2, if (distance > 1), if (player.stats.faith < 70). As you add more factions, units, and abilities, this file will become an enormous, unmanageable series of if/else statements.

The Improvement: Transition to a data-driven "modifier" or "rules engine" system.

Move Stats to Data: A unit's visionRadius should be a property on its data definition, not a magic number in the reducer. Terrain types should have an isPassable property.

Create a Modifier System: Instead of hardcoding if (factionId === 'NEPHITES'), the Nephite faction data should have a list of modifiers, like { "trigger": "on_attack", "condition": "faith > 70", "effect": { "stat": "attack", "value": 1 } }. The handleAttackUnit function would then become generic: it would fetch all active modifiers for the attacker and target and apply their effects. This moves the specific rules out of the core logic and into the game data, making the game incredibly easy to balance, modify, and expand.

Fix Combat Logic Bug:

The Issue: In handleAttackUnit, the "Blood Feud" ability seems to trigger for the wrong player. When a unit is killed, the code buffs units belonging to the target.playerId. This means when a Lamanite unit dies, its own nearby allies get a buff. The description implies the attacker should feel a surge of pride or vengeance. This should likely be attacker.playerId.

The Improvement: Clarify the intended mechanic and fix the playerId check. This is a direct bug that affects gameplay.

Expand handleEndTurn Logic:

The Issue: The current handleEndTurn function correctly advances the player index and resets the next player's movement. However, a turn transition involves more than that.

The Improvement: Expand this function to be a full end-of-turn/start-of-turn process. This should include:

Applying per-turn resource generation (e.g., stars/gold from cities).

Handling status effects (e.g., "attack buff wears off at the start of your next turn").

Checking for victory/defeat conditions.