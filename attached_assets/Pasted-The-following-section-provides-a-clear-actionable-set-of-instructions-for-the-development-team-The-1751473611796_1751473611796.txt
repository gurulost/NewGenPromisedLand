The following section provides a clear, actionable set of instructions for the development team. The goal is to implement a local **"Pass-and-Play"** multiplayer mode, a critical feature for this game. This mode will allow multiple players to compete in the same game by taking turns on a single device, such as an iPad, which can then be passed between players. This ensures a fun, shared-screen experience for friends and family playing together in the same room.

***

### **Implementation Plan: Local "Pass-and-Play" Mode**

To add support for local hotseat multiplayer, the following tasks should be integrated into the development plan. This mode will allow multiple players to compete on a single device and is a top priority alongside the single-player experience.

---

### 1. Game Setup & Menu

* **Add a "Local Game" Menu Option:** On the main menu screen, add a new button labeled **"Local Game"** or **"Pass-and-Play"** alongside the "Single Player" and "Online Multiplayer" options.
* **Create a Player Setup Screen:** This new screen allows users to set up their local game. It must include:
    * A way to add and remove player slots (supporting 2-6 players).
    * For each player slot, a dropdown menu to select their faction (Nephites, Lamanites, etc.).
    * A "Start Game" button that launches the match with the chosen settings.

---

### 2. Core Turn Logic

This is the most critical part of the implementation. The goal is to reuse the existing `gameReducer` without any network calls.

* **Track the Active Player:** In the main game state (managed by Zustand), add a variable called `currentPlayerIndex`. This will be a number (e.g., 0 for Player 1, 1 for Player 2, etc.).
* **Modify "End Turn" Functionality:** Create a specific "end turn" handler for local multiplayer. When a player clicks the "End Turn" button:
    1.  The game should **NOT** send any data to a server.
    2.  It should increment the `currentPlayerIndex` by one. If it reaches the end of the player list, it should loop back to 0.
    3.  It should then trigger the "Handoff Screen" to manage the transition.

---

### 3. Implement the "Handoff Screen"

To ensure a smooth and fair experience, a simple screen must be displayed between turns so the next player doesn't see the previous player's information.

* **Create a Handoff Component:** Build a simple, full-screen UI component that completely hides the game board.
* **Display Next Player Information:** This screen should clearly state whose turn it is next. For example: *"Turn complete for the Lamanites. Please pass the device to the Nephites."*
* **Require Player Interaction:** Include a large, single button on the screen, such as **"Tap to Start Turn."** The game will only proceed to the next turn after this button is pressed, ensuring the correct player is ready.

---

### 4. Manage Player-Specific Fog of War

Each player must have their own view of the map. It's crucial that players cannot see what their opponents have explored.

* **Store Individual Visibility:** The main game state must maintain a separate **`visibilityMask`** (a record of all explored tiles) for *each player* in the game.
* **Update Rendering on Turn Change:** When a new player's turn begins (after the handoff screen), the rendering engine must be instructed to use the `visibilityMask` belonging to the new `currentPlayerIndex`. This will correctly hide and show tiles based on what that specific player has explored.