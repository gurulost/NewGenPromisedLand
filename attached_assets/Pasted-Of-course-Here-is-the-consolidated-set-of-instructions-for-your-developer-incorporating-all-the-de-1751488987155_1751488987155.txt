Of course. Here is the consolidated set of instructions for your developer, incorporating all the details we've discussed, including the "Huge" map size, and formatted for easy copying and pasting.

***

### **Developer Briefing: Advanced Map Generation System**

This document outlines the specifications for a new map generation system for "Chronicles of the Promised Land." The goal is to create strategically diverse and faction-specific starting positions, giving players more control over their game experience.

### **Part 1: Map Size and Player Setup**

We will implement a system for user-selectable map sizes.

**1.1. Map Size Options:**

The following map sizes should be available for the host to select during game setup. This data should be stored in a configuration object, likely in `shared/utils/mapGenerator.ts`.

* **Tiny:** 121 tiles (11x11), for 2 players.
* **Small:** 196 tiles (14x14), for 2-3 players.
* **Normal:** 256 tiles (16x16), for 3-4 players.
* **Large:** 324 tiles (18x18), for 4-6 players.
* **Huge:** 400 tiles (20x20), for up to 8 players.

**1.2. UI and Logic Implementation:**

* **Player Setup UI (`client/src/components/ui/PlayerSetup.tsx`):** Add a `<Select>` component to the player setup screen that allows the host to choose from the available map sizes. This selection should be stored in the component's state.
* **Game Initialization (`client/src/lib/stores/useLocalGame.ts`):** The `startLocalGame` function must be updated to accept the selected `mapSize` as a parameter. This parameter will then be passed to the `MapGenerator`.
* **Map Generator (`shared/utils/mapGenerator.ts`):** The `generateBalancedMap` static method should be updated to accept the `mapSize` string. It will use this to look up the dimensions from the configuration object instead of calculating them dynamically.

---

### **Part 2: Map Generation Sequence**

To ensure logical and balanced maps, the generation process must follow this specific order:

1.  **Capital Spawns:** Determine starting locations for each player first. Use a quadrant-based system to ensure players are spaced evenly across the map.
2.  **Village/City Spawning:** Place neutral cities or "villages." Resources can spawn near these, but not directly on them.
3.  **Terrain Generation:** Generate the base terrain for the entire map using the cascading modifier logic described in the next section.
4.  **Resource Placement:** Place resources on the map according to the zoned spawning rules and faction modifiers.
5.  **Special Feature Placement:** Place unique, world-building features like "Ruins" or "Sacred Groves" last.

---

### **Part 3: Faction-Biased Terrain and Resource Generation**

This is the most critical component. It will make each faction's starting area unique and strategically interesting.

**3.1. Cascading Terrain Modifiers:**

The system for applying faction-specific terrain modifiers must follow a specific, cascading order of operations. This logic should be applied to each player's starting quadrant or region.

1.  **Start with Base Percentages:** Begin with the game's default terrain percentages (e.g., Mountain: 14%, Forest: 38%, Field: 48%).
2.  **Apply Mountain Modifier:** Apply the faction's mountain modifier. The change (delta) in the mountain percentage is then proportionally subtracted from the *original* forest and field percentages.
3.  **Apply Forest Modifier:** Apply the faction's forest modifier to the *newly adjusted* forest percentage from the previous step. The change in this value is then subtracted *only* from the field percentage.
4.  **Final Field Percentage:** The field percentage is what remains after the mountain and forest calculations are complete.

**3.2. Faction Modifier Table:**

* **Nephites:** 1.5x Mountain Mod, 0.8x Forest Mod. Resource Mods: 1.5x Metal, add a unique "Sacred Grove" tile near the capital.
* **Lamanites:** 0.8x Mountain Mod, 1.5x Forest Mod. Resource Mods: 2.0x Animal, 0.5x Fruit, 0x Crop (cannot spawn).
* **Mulekites:** 0.5x Mountain Mod, 0.8x Forest Mod. Resource Mods: 1.5x Fruit, 1.5x Fish, 1.5x Water Tiles.
* **Zoramites:** 1.2x Mountain Mod, 0.5x Forest Mod. Resource Mods: 2.0x Metal, 0.5x Fruit.
* **Anti-Nephi-Lehies:** 0.5x Mountain Mod, 1.2x Forest Mod. Resource Mods: 2.0x Crop, 0.1x Animal, 0.1x Metal.
* **Jaredites:** No terrain modifiers. Resource Mods: 1.0x (standard rates).

**3.3. Zoned Resource Spawning Rules:**

Implement the following rules in the `placeResources` function to create resource-rich zones around cities and encourage strategic expansion.

* **The 2-Tile Radius Rule:** Resources can **only** spawn on tiles that are within a 2-tile hex distance of a city or village. Tiles outside this radius should remain empty of resources.
* **"Inner City" vs. "Outer City" Spawn Rates:**
    * **Inner City (1 tile away):** These tiles have a high concentration of resources.
    * **Outer City (2 tiles away):** These tiles have a lower chance of spawning resources.

**3.4. Spawn Rate Table:**

This table should guide the probability of a resource spawning on a valid tile, differentiated by the Inner/Outer City zones.

* **Inner City (1 Tile Away):**
    * Food (Crops/Fruit): 30%
    * Wood: 25%
    * Stone: 20%
    * Gold (Metal): 15%
    * Empty: 10%

* **Outer City (2 Tiles Away):**
    * Food (Crops/Fruit): 10%
    * Wood: 20%
    * Stone: 10%
    * Gold (Metal): 5%
    * Empty: 55%

This comprehensive approach will create a robust and replayable map generation system that is central to the game's strategic depth.