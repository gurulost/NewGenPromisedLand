Pre-game setup
Provide a start-game menu with mode, faction, map size/seed, then launch.
Run the deterministic map generator so the grid, starting cities, units, and initial visibility masks exist.
Create and store the initial GameState (players, star counts, city inventories, unbuilt resource nodes, tech status).
Turn 1 – first moves, first tech
The player must be able to:

Select and move a starting unit. Valid destinations highlight; path animates; fog-of-war updates.
Open the Tech panel and buy the first technology (often “Organization” or equivalent) so that building actions unlock.
Required systems:

Input manager → game actions (selectTile, moveUnit, openTechUI).
Path-finder & movement validator.
Instant visibility-mask refresh after movement.
Tech UI wired to the rules engine so researching subtracts stars, sets a “tech-unlocked” flag, and potentially toggles buildable improvements for specific terrains.
No construction actually happens this turn, but unlocking the first tech sets the stage for it.

Ending Turn 1
End Turn button is visible only while the finite-state machine is in PlayerTurn.
Pressing it increments the turn counter, runs star-income + city-growth, then hands control to the AI (or next human).
AI / next-player phase
The opponent executes minimal AI logic (move / scout / research).
Enemy moves animate; camera pans; fog updates.
Turn 2 – first building & first expansion
Now the player will typically:

Capture a neutral city. Ownership flips, star income rises, defender spawns.
Select a worker-capable unit (often the initial warrior/settler) and build the first tile improvement:
Select the unit, tap the “Build” button.
Valid resource tiles (fruit, forest, fish, etc.) highlight.
Player clicks a tile → stars deducted, improvement sprite appears, and the parent city’s population meter jumps.
Systems you need working for this:

BUILD_IMPROVEMENT reducer case that validates terrain, checks tech prerequisites, subtracts stars, spawns the improvement entity, and bumps the attached city’s growth gauge.
Build UI overlay: shows cost, required tech, preview icon.
Build-time animation / sound (even if just a quick “pop”).
City-capture reducer logic (ownership swap; star-income recalculation).
City panel UI with a Recruit unit button (consumes stars and queues the unit).
Turn 3 – production & construction cycle
By the third turn the player should be able to:

Research a second tech (respecting prerequisites and escalating cost).
Finish the queued unit or queue another one.
Build another improvement—perhaps a farm, mine, or sawmill—on a new resource tile, or start a city structure (e.g., park, port) if that tech is unlocked.
Conduct at least one combat action (attack, retaliation animation, HP bars).
Necessary systems:

Tech-prerequisite checks and cost scaling.
BUILD_STRUCTURE reducer path for things that occupy the city tile itself (ports, temples, etc.)—deduct stars, add a construction timer if your design calls for delayed completion.
Combat resolution & juice (animations, sounds).
Turn 4 – smoke-test milestone
By the end of Turn 4 a player should be able to:

Repeat the loop—move, build, research, recruit, end turn—without errors.
Save the match, reload from the main menu, and resume with all buildings, units, star counts, and techs intact.
So the save/load pipeline must serialize:

grid & fog state,
units,
improvements and structures (with any remaining build timers),
current tech tree,
turn queue.
Critical engineering deliverables (now including building)
Reducer / rules-engine cases for MOVE_UNIT, ATTACK, CAPTURE_CITY, RESEARCH_TECH, BUILD_IMPROVEMENT, BUILD_STRUCTURE, RECRUIT_UNIT, END_TURN.
Input-to-action mapping and visual feedback—tile highlights for movement and for buildable spots, plus construction animations.
Star economy, fog-of-war, path-finding, building validation, combat, and tech-tree logic fully unit-tested.
End-turn pipeline that passes control to AI and back without memory leaks or timing deadlocks, while completing any build timers.
Save/load that round-trips every entity (units, improvements, structures) with deterministic replay.
