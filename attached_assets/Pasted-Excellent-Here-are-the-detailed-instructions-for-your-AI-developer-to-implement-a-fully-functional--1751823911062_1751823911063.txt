Excellent. Here are the detailed instructions for your AI developer to implement a fully functional technology tree.

### **Objective: Implement a Complete and Functional Tech Tree**

The current technology tree is a visual mock-up in `TechPanel.tsx`. We need to transform it into a fully functional system where players can research technologies to unlock new units, buildings, and abilities, directly impacting their strategic options. The system must be data-driven and fully integrated with the core game logic.

-----

### **High-Level Implementation Plan**

The task can be broken down into three main parts: ensuring the UI is generated dynamically from our data, implementing the logic to unlock techs, and then enforcing those unlocks throughout the game.

#### **1. Dynamically Generate the Tech Tree in `TechPanel.tsx`**

The `TechPanel.tsx` component should not have a hardcoded layout. It must render the entire tree based on the data defined in `shared/data/technologies.ts`.

  * **Fetch Technology Data:** The component should import the `technologies` array from `shared/data/technologies.ts`.
  * **Render Nodes and Connections:**
      * Iterate through the `technologies` data and dynamically render a UI element (a "node") for each technology.
      * Use the `dependencies` array within each technology object to draw visual connections (lines or arrows) between nodes, creating the tree structure.
  * **Reflect Research State:** The appearance of each tech node must reflect its current state for the active player:
      * **Unlocked:** If the tech's ID is in the player's `unlockedTechnologies` array.
      * **Available to Research:** If the player has unlocked all dependencies and has enough resources.
      * **Locked:** If dependencies are not met.

#### **2. Implement Research Logic in `gameReducer.ts`**

When a player clicks a research button in the `TechPanel.tsx`, it must trigger a state change that is validated by the game's rules.

  * **Dispatch Action from UI:** The "Research" button for an available tech in `TechPanel.tsx` should dispatch a `RESEARCH_TECHNOLOGY` action, including the `technologyId` in its payload.
  * **Create Reducer Case:** Add a case for `RESEARCH_TECHNOLOGY` in `gameReducer.ts`. This logic must:
    1.  **Verify Prerequisites:** Check that all `dependencies` for the chosen tech exist in the current player's `unlockedTechnologies` array.
    2.  **Check Cost:** Verify the player has enough "stars" (or other resources) to afford the `cost` of the research.
    3.  **Update Player State:** If the checks pass, subtract the cost from the player's resources and add the new `technologyId` to their `unlockedTechnologies` array.

**Example Implementation for `RESEARCH_TECHNOLOGY`:**

```typescript
// In gameReducer.ts, within the reducer function

case 'RESEARCH_TECHNOLOGY': {
  const { playerId, technologyId } = action.payload;
  const tech = technologies.find(t => t.id === technologyId);
  const player = state.players.find(p => p.id === playerId);

  if (!tech || !player) return state; // Safety check

  // 1. Verify prerequisites
  const hasPrerequisites = tech.dependencies.every(depId =>
    player.unlockedTechnologies.includes(depId)
  );

  // 2. Verify cost
  const canAfford = player.stars >= tech.cost;

  if (hasPrerequisites && canAfford) {
    return {
      ...state,
      players: state.players.map(p => {
        if (p.id === playerId) {
          return {
            ...p,
            stars: p.stars - tech.cost,
            unlockedTechnologies: [...p.unlockedTechnologies, technologyId],
          };
        }
        return p;
      }),
    };
  }
  
  // If checks fail, return the original state
  return state;
}
```

#### **3. Enforce Technology Requirements Across the Game**

Unlocking a technology is meaningless if it doesn't grant new capabilities. You must "gate" access to units, buildings, and actions based on the player's `unlockedTechnologies`.

  * **Filter Buildable Units:** In the UI component responsible for showing what a city can build (e.g., `CityPanel.tsx`), you must filter the master unit list from `shared/data/units.ts`. A unit should only appear in the build list if its `requiredTechnology` is `null` or if its ID is included in the player's `unlockedTechnologies` array.
  * **Gate Unit Actions:** For special abilities defined in `UnitActionsPanel.tsx`, wrap the action button in a similar check. For example, the "Harvest Fruit" action should only appear if the player has unlocked the "Farming" technology.
  * **Gate Buildings:** Apply the same filtering logic for city improvements and buildings.

By tackling the problem in this order—UI first, then state logic, then enforcement—your developer will create a robust and complete tech tree that is central to the game's strategic progression.